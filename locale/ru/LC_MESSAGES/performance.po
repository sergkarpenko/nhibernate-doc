# 
msgid ""
msgstr ""
"Project-Id-Version: NHibernate Object Relational Mapper 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-28 22:06+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../performance.rst:5
msgid "Improving performance"
msgstr ""

#: ../../performance.rst:10
msgid "Fetching strategies"
msgstr ""

#: ../../performance.rst:12
msgid ""
"A *fetching strategy* is the strategy NHibernate will use for retrieving "
"associated objects if the application needs to navigate the association. "
"Fetch strategies may be declared in the O/R mapping metadata, or overridden "
"by a particular HQL or ``Criteria`` query."
msgstr ""

#: ../../performance.rst:17
msgid "NHibernate defines the following fetching strategies:"
msgstr ""

#: ../../performance.rst:19
msgid ""
"*Join fetching* - NHibernate retrieves the associated instance or collection"
" in the same ``SELECT``, using an ``OUTER JOIN``."
msgstr ""

#: ../../performance.rst:23
msgid ""
"*Select fetching* - a second ``SELECT`` is used to retrieve the associated "
"entity or collection. Unless you explicitly disable lazy fetching by "
"specifying ``lazy=\"false\"``, this second select will only be executed when"
" you actually access the association."
msgstr ""

#: ../../performance.rst:29
msgid ""
"*Subselect fetching* - a second ``SELECT`` is used to retrieve the "
"associated collections for all entities retrieved in a previous query or "
"fetch. Unless you explicitly disable lazy fetching by specifying "
"``lazy=\"false\"``, this second select will only be executed when you "
"actually access the association."
msgstr ""

#: ../../performance.rst:35
msgid ""
"*\"Extra-lazy\" collection fetching* - individual elements of the collection"
" are accessed from the database as needed. NHibernate tries not to fetch the"
" whole collection into memory unless absolutely needed (suitable for very "
"large collections)"
msgstr ""

#: ../../performance.rst:40
msgid ""
"*Batch fetching* - an optimization strategy for select fetching - NHibernate"
" retrieves a batch of entity instances or collections in a single "
"``SELECT``, by specifying a list of primary keys or foreign keys."
msgstr ""

#: ../../performance.rst:45
msgid "NHibernate also distinguishes between:"
msgstr ""

#: ../../performance.rst:47
msgid ""
"*Immediate fetching* - an association, collection or attribute is fetched "
"immediately, when the owner is loaded."
msgstr ""

#: ../../performance.rst:50
msgid ""
"*Lazy collection fetching* - a collection is fetched when the application "
"invokes an operation upon that collection. (This is the default for "
"collections.)"
msgstr ""

#: ../../performance.rst:54
msgid ""
"*Proxy fetching* - a single-valued association is fetched when a method "
"other than the identifier getter is invoked upon the associated object."
msgstr ""

#: ../../performance.rst:58
msgid ""
"We have two orthogonal notions here: *when* is the association fetched, and "
"*how* is it fetched (what SQL is used). Don't confuse them! We use ``fetch``"
" to tune performance. We may use ``lazy`` to define a contract for what data"
" is always available in any detached instance of a particular class."
msgstr ""

#: ../../performance.rst:65
msgid "Working with lazy associations"
msgstr ""

#: ../../performance.rst:67
msgid ""
"By default, NHibernate uses lazy select fetching for collections and lazy "
"proxy fetching for single-valued associations. These defaults make sense for"
" almost all associations in almost all applications."
msgstr ""

#: ../../performance.rst:71
msgid ""
"However, lazy fetching poses one problem that you must be aware of. Access "
"to a lazy association outside of the context of an open NHibernate session "
"will result in an exception. For example:"
msgstr ""

#: ../../performance.rst:89
msgid ""
"Since the ``permissions`` collection was not initialized when the "
"``ISession`` was closed, the collection will not be able to load its state. "
"*NHibernate does not support lazy initialization for detached objects*. The "
"fix is to move the code that reads from the collection to just before the "
"transaction is committed."
msgstr ""

#: ../../performance.rst:96
msgid ""
"Alternatively, we could use a non-lazy collection or association, by "
"specifying ``lazy=\"false\"`` for the association mapping. However, it is "
"intended that lazy initialization be used for almost all collections and "
"associations. If you define too many non-lazy associations in your object "
"model, NHibernate will end up needing to fetch the entire database into "
"memory in every transaction!"
msgstr ""

#: ../../performance.rst:103
msgid ""
"On the other hand, we often want to choose join fetching (which is non-lazy "
"by nature) instead of select fetching in a particular transaction. We'll now"
" see how to customize the fetching strategy. In NHibernate, the mechanisms "
"for choosing a fetch strategy are identical for single-valued associations "
"and collections."
msgstr ""

#: ../../performance.rst:110
msgid "Tuning fetch strategies"
msgstr ""

#: ../../performance.rst:112
msgid ""
"Select fetching (the default) is extremely vulnerable to N+1 selects "
"problems, so we might want to enable join fetching in the mapping document:"
msgstr ""

#: ../../performance.rst:127
msgid "The ``fetch`` strategy defined in the mapping document affects:"
msgstr ""

#: ../../performance.rst:129
msgid "retrieval via ``Get()`` or ``Load()``"
msgstr ""

#: ../../performance.rst:131
msgid "retrieval that happens implicitly when an association is navigated"
msgstr ""

#: ../../performance.rst:133
msgid "``ICriteria`` queries"
msgstr ""

#: ../../performance.rst:135
msgid "HQL queries if ``subselect`` fetching is used"
msgstr ""

#: ../../performance.rst:137
msgid ""
"No matter what fetching strategy you use, the defined non-lazy graph is "
"guaranteed to be loaded into memory. Note that this might result in several "
"immediate selects being used to execute a particular HQL query."
msgstr ""

#: ../../performance.rst:141
msgid ""
"Usually, we don't use the mapping document to customize fetching. Instead, "
"we keep the default behavior, and override it for a particular transaction, "
"using ``left join fetch`` in HQL. This tells NHibernate to fetch the "
"association eagerly in the first select, using an outer join. In the "
"``ICriteria`` query API, you would use ``SetFetchMode(FetchMode.Join)``."
msgstr ""

#: ../../performance.rst:148
msgid ""
"If you ever feel like you wish you could change the fetching strategy used "
"by ``Get()`` or ``Load()``, simply use a ``ICriteria`` query, for example:"
msgstr ""

#: ../../performance.rst:159
msgid ""
"(This is NHibernate's equivalent of what some ORM solutions call a \"fetch "
"plan\".)"
msgstr ""

#: ../../performance.rst:161
msgid ""
"A completely different way to avoid problems with N+1 selects is to use the "
"second-level cache."
msgstr ""

#: ../../performance.rst:165
msgid "Single-ended association proxies"
msgstr ""

#: ../../performance.rst:167
msgid ""
"Lazy fetching for collections is implemented using NHibernate's own "
"implementation of persistent collections. However, a different mechanism is "
"needed for lazy behavior in single-ended associations. The target entity of "
"the association must be proxied. NHibernate implements lazy initializing "
"proxies for persistent objects using runtime bytecode enhancement."
msgstr ""

#: ../../performance.rst:173
msgid ""
"By default, NHibernate generates proxies (at startup) for all persistent "
"classes and uses them to enable lazy fetching of ``many-to-one`` and ``one-"
"to-one`` associations."
msgstr ""

#: ../../performance.rst:177
msgid ""
"The mapping file may declare an interface to use as the proxy interface for "
"that class, with the ``proxy`` attribute. By default, NHibernate uses a "
"subclass of the class. *Note that the proxied class must implement a non-"
"private default constructor. We recommend this constructor for all "
"persistent classes!*"
msgstr ""

#: ../../performance.rst:182
msgid ""
"There are some gotchas to be aware of when extending this approach to "
"polymorphic classes, eg."
msgstr ""

#: ../../performance.rst:194
msgid ""
"Firstly, instances of ``Cat`` will never be castable to ``DomesticCat``, "
"even if the underlying instance is an instance of ``DomesticCat``:"
msgstr ""

#: ../../performance.rst:206
msgid "Secondly, it is possible to break proxy ``==``."
msgstr ""

#: ../../performance.rst:215
msgid ""
"However, the situation is not quite as bad as it looks. Even though we now "
"have two references to different proxy objects, the underlying instance will"
" still be the same object:"
msgstr ""

#: ../../performance.rst:223
msgid ""
"Third, you may not use a proxy for a ``sealed`` class or a class with any "
"non-overridable public members."
msgstr ""

#: ../../performance.rst:226
msgid ""
"Finally, if your persistent object acquires any resources upon instantiation"
" (eg. in initializers or default constructor), then those resources will "
"also be acquired by the proxy. The proxy class is an actual subclass of the "
"persistent class."
msgstr ""

#: ../../performance.rst:230
msgid ""
"These problems are all due to fundamental limitations in .NET's single "
"inheritance model. If you wish to avoid these problems your persistent "
"classes must each implement an interface that declares its business methods."
" You should specify these interfaces in the mapping file. eg."
msgstr ""

#: ../../performance.rst:243
msgid ""
"where ``CatImpl`` implements the interface ``ICat`` and ``DomesticCatImpl`` "
"implements the interface ``IDomesticCat``. Then proxies for instances of "
"``ICat`` and ``IDomesticCat`` may be returned by ``Load()`` or "
"``Enumerable()``. (Note that ``List()`` does not usually return proxies.)"
msgstr ""

#: ../../performance.rst:256
msgid ""
"Relationships are also lazily initialized. This means you must declare any "
"properties to be of type ``ICat``, not ``CatImpl``."
msgstr ""

#: ../../performance.rst:259
msgid "Certain operations do *not* require proxy initialization"
msgstr ""

#: ../../performance.rst:261
msgid "``Equals()``, if the persistent class does not override ``Equals()``"
msgstr ""

#: ../../performance.rst:264
msgid ""
"``GetHashCode()``, if the persistent class does not override "
"``GetHashCode()``"
msgstr ""

#: ../../performance.rst:267
msgid "The identifier getter method"
msgstr ""

#: ../../performance.rst:269
msgid ""
"NHibernate will detect persistent classes that override ``Equals()`` or "
"``GetHashCode()``."
msgstr ""

#: ../../performance.rst:273
msgid "Initializing collections and proxies"
msgstr ""

#: ../../performance.rst:275
msgid ""
"A ``LazyInitializationException`` will be thrown by NHibernate if an "
"uninitialized collection or proxy is accessed outside of the scope of the "
"``ISession``, ie. when the entity owning the collection or having the "
"reference to the proxy is in the detached state."
msgstr ""

#: ../../performance.rst:279
msgid ""
"Sometimes we need to ensure that a proxy or collection is initialized before"
" closing the ``ISession``. Of course, we can alway force initialization by "
"calling ``cat.Sex`` or ``cat.Kittens.Count``, for example. But that is "
"confusing to readers of the code and is not convenient for generic code."
msgstr ""

#: ../../performance.rst:284
msgid ""
"The static methods ``NHibernateUtil.Initialize()`` and "
"``NHibernateUtil.IsInitialized()`` provide the application with a convenient"
" way of working with lazily initialized collections or proxies. "
"``NHibernateUtil.Initialize(cat)`` will force the initialization of a proxy,"
" ``cat``, as long as its ``ISession`` is still open. "
"``NHibernateUtil.Initialize( cat.Kittens )`` has a similar effect for the "
"collection of kittens."
msgstr ""

#: ../../performance.rst:291
msgid ""
"Another option is to keep the ``ISession`` open until all needed collections"
" and proxies have been loaded. In some application architectures, "
"particularly where the code that accesses data using NHibernate, and the "
"code that uses it are in different application layers or different physical "
"processes, it can be a problem to ensure that the ``ISession`` is open when "
"a collection is initialized. There are two basic ways to deal with this "
"issue:"
msgstr ""

#: ../../performance.rst:298
msgid ""
"In a web-based application, a ``HttpModule`` can be used to close the "
"``ISession`` only at the very end of a user request, once the rendering of "
"the view is complete (the *Open Session in View* pattern).  Of course, this "
"places heavy demands on the correctness of the exception handling of your "
"application infrastructure. It is vitally important that the ``ISession`` is"
" closed and the transaction ended before returning to the user, even when an"
" exception occurs during rendering of the view. See the NHibernate Wiki for "
"examples of this \"Open Session in View\" pattern."
msgstr ""

#: ../../performance.rst:308
msgid ""
"In an application with a separate business tier, the business logic must "
"\"prepare\" all collections that will be needed by the web tier before "
"returning. This means that the business tier should load all the data and "
"return all the data already initialized to the presentation/web tier that is"
" required for a particular use case. Usually, the application calls "
"``NHibernateUtil.Initialize()`` for each collection that will be needed in "
"the web tier (this call must occur before the session is closed) or "
"retrieves the collection eagerly using a NHibernate query with a ``FETCH`` "
"clause or a ``FetchMode.Join`` in ``ICriteria``. This is usually easier if "
"you adopt the *Command* pattern instead of a *Session Facade*."
msgstr ""

#: ../../performance.rst:320
msgid ""
"You may also attach a previously loaded object to a new ``ISession`` with "
"``Merge()`` or ``Lock()`` before accessing uninitialized collections (or "
"other proxies). No, NHibernate does not, and certainly *should* not do this "
"automatically, since it would introduce ad hoc transaction semantics!"
msgstr ""

#: ../../performance.rst:326
msgid ""
"Sometimes you don't want to initialize a large collection, but still need "
"some information about it (like its size) or a subset of the data."
msgstr ""

#: ../../performance.rst:329
msgid ""
"You can use a collection filter to get the size of a collection without "
"initializing it:"
msgstr ""

#: ../../performance.rst:335
msgid ""
"The ``CreateFilter()`` method is also used to efficiently retrieve subsets "
"of a collection without needing to initialize the whole collection:"
msgstr ""

#: ../../performance.rst:343
msgid "Using batch fetching"
msgstr ""

#: ../../performance.rst:345
msgid ""
"NHibernate can make efficient use of batch fetching, that is, NHibernate can"
" load several uninitialized proxies if one proxy is accessed (or "
"collections. Batch fetching is an optimization of the lazy select fetching "
"strategy. There are two ways you can tune batch fetching: on the class and "
"the collection level."
msgstr ""

#: ../../performance.rst:349
msgid ""
"Batch fetching for classes/entities is easier to understand. Imagine you "
"have the following situation at runtime: You have 25 ``Cat`` instances "
"loaded in an ``ISession``, each ``Cat`` has a reference to its ``Owner``, a "
"``Person``. The ``Person`` class is mapped with a proxy, ``lazy=\"true\"``. "
"If you now iterate through all cats and call ``cat.Owner`` on each, "
"NHibernate will by default execute 25 ``SELECT`` statements, to retrieve the"
" proxied owners. You can tune this behavior by specifying a ``batch-size`` "
"in the mapping of ``Person``:"
msgstr ""

#: ../../performance.rst:361
msgid ""
"NHibernate will now execute only three queries, the pattern is 10, 10, 5."
msgstr ""

#: ../../performance.rst:363
msgid ""
"You may also enable batch fetching of collections. For example, if each "
"``Person`` has a lazy collection of ``Cat``s, and 10 persons are currently "
"loaded in the ``ISesssion``, iterating through all persons will generate 10 "
"``SELECT``s, one for every call to ``person.Cats``. If you enable batch "
"fetching for the ``Cats`` collection in the mapping of ``Person``, "
"NHibernate can pre-fetch collections:"
msgstr ""

#: ../../performance.rst:378
msgid ""
"With a ``batch-size`` of 3, NHibernate will load 3, 3, 3, 1 collections in "
"four ``SELECT``s. Again, the value of the attribute depends on the expected "
"number of uninitialized collections in a particular ``Session``."
msgstr ""

#: ../../performance.rst:382
msgid ""
"Batch fetching of collections is particularly useful if you have a nested "
"tree of items, ie. the typical bill-of-materials pattern. (Although a "
"*nested set* or a *materialized path* might be a better option for read-"
"mostly trees.)"
msgstr ""

#: ../../performance.rst:387
msgid "Using subselect fetching"
msgstr ""

#: ../../performance.rst:389
msgid ""
"If one lazy collection or single-valued proxy has to be fetched, NHibernate "
"loads all of them, re-running the original query in a subselect. This works "
"in the same way as batch-fetching, without the piecemeal loading."
msgstr ""

#: ../../performance.rst:394
msgid "The Second Level Cache"
msgstr ""

#: ../../performance.rst:396
msgid ""
"A NHibernate ``ISession`` is a transaction-level cache of persistent data. "
"It is possible to configure a cluster or process-level "
"(``ISessionFactory``-level) cache on a class-by-class and collection-by-"
"collection basis. You may even plug in a clustered cache. Be careful. Caches"
" are never aware of changes made to the persistent store by another "
"application (though they may be configured to regularly expire cached data)."
" *In NHibernate 1.x the second level cache does not work correctly in "
"combination with distributed transactions.*"
msgstr ""

#: ../../performance.rst:404
msgid ""
"By default, NHibernate uses HashtableCache for process-level caching. You "
"may choose a different implementation by specifying the name of a class that"
" implements ``NHibernate.Cache.ICacheProvider`` using the property "
"``hibernate.cache.provider_class``."
msgstr ""

#: ../../performance.rst:408
msgid "Cache Providers"
msgstr ""

#: ../../performance.rst:411 ../../performance.rst:494
msgid "Cache"
msgstr ""

#: ../../performance.rst:411
msgid "Provider class"
msgstr ""

#: ../../performance.rst:411
msgid "Type"
msgstr ""

#: ../../performance.rst:411
msgid "Cluster Safe"
msgstr ""

#: ../../performance.rst:411
msgid "Query Cache Supported"
msgstr ""

#: ../../performance.rst:413 ../../performance.rst:496
msgid "Hashtable (not intended for production use)"
msgstr ""

#: ../../performance.rst:413
msgid "``NHibernate.Cache.HashtableCacheProvider``"
msgstr ""

#: ../../performance.rst:413 ../../performance.rst:414
msgid "memory"
msgstr ""

#: ../../performance.rst:413 ../../performance.rst:414
#: ../../performance.rst:415 ../../performance.rst:496
#: ../../performance.rst:496 ../../performance.rst:496
#: ../../performance.rst:497 ../../performance.rst:497
#: ../../performance.rst:497 ../../performance.rst:498
#: ../../performance.rst:498 ../../performance.rst:498
msgid "yes"
msgstr ""

#: ../../performance.rst:414
msgid "ASP.NET Cache (System.Web.Cache)"
msgstr ""

#: ../../performance.rst:414
msgid ""
"``NHibernate.Caches.SysCache.SysCacheProvider, NHibernate.Caches.SysCache``"
msgstr ""

#: ../../performance.rst:415
msgid "Prevalence Cache"
msgstr ""

#: ../../performance.rst:415
msgid ""
"``NHibernate.Caches.Prevalence.PrevalenceCacheProvider, "
"NHibernate.Caches.Prevalence``"
msgstr ""

#: ../../performance.rst:415
msgid "memory, disk"
msgstr ""

#: ../../performance.rst:419
msgid "Cache mappings"
msgstr ""

#: ../../performance.rst:421
msgid ""
"The ``<cache>`` element of a class or collection mapping has the following "
"form:"
msgstr ""

#: ../../performance.rst:431
msgid ""
"``usage`` specifies the caching strategy: ``read-write``, ``nonstrict-read-"
"write`` or ``read-only``"
msgstr ""

#: ../../performance.rst:436
msgid ""
"``region`` (optional, defaults to the class or collection role name) "
"specifies the name of the second level cache region"
msgstr ""

#: ../../performance.rst:440
msgid ""
"Alternatively (preferrably?), you may specify ``<class-cache>`` and "
"``<collection-cache>`` elements in ``hibernate.cfg.xml``."
msgstr ""

#: ../../performance.rst:443
msgid "The ``usage`` attribute specifies a *cache concurrency strategy*."
msgstr ""

#: ../../performance.rst:446
msgid "Strategy: read only"
msgstr ""

#: ../../performance.rst:448
msgid ""
"If your application needs to read but never modify instances of a persistent"
" class, a ``read-only`` cache may be used. This is the simplest and best "
"performing strategy. Its even perfectly safe for use in a cluster."
msgstr ""

#: ../../performance.rst:460
msgid "Strategy: read/write"
msgstr ""

#: ../../performance.rst:462
msgid ""
"If the application needs to update data, a ``read-write`` cache might be "
"appropriate. This cache strategy should never be used if serializable "
"transaction isolation level is required. You should ensure that the "
"transaction is completed when ``ISession.Close()`` or "
"``ISession.Disconnect()`` is called. If you wish to use this strategy in a "
"cluster, you should ensure that the underlying cache implementation supports"
" locking. The built-in cache providers do *not*."
msgstr ""

#: ../../performance.rst:481
msgid "Strategy: nonstrict read/write"
msgstr ""

#: ../../performance.rst:483
msgid ""
"If the application only occasionally needs to update data (ie. if it is "
"extremely unlikely that two transactions would try to update the same item "
"simultaneously) and strict transaction isolation is not required, a "
"``nonstrict-read-write`` cache might be appropriate. When using this "
"strategy you should ensure that the transaction is completed when "
"``ISession.Close()`` or ``ISession.Disconnect()`` is called."
msgstr ""

#: ../../performance.rst:489
msgid ""
"The following table shows which providers are compatible with which "
"concurrency strategies."
msgstr ""

#: ../../performance.rst:491
msgid "Cache Concurrency Strategy Support"
msgstr ""

#: ../../performance.rst:494
msgid "read-only"
msgstr ""

#: ../../performance.rst:494
msgid "nonstrict-read-write"
msgstr ""

#: ../../performance.rst:494
msgid "read-write"
msgstr ""

#: ../../performance.rst:497
msgid "SysCache"
msgstr ""

#: ../../performance.rst:498
msgid "PrevalenceCache"
msgstr ""

#: ../../performance.rst:501
msgid "Refer to :ref:`caches` for more details."
msgstr ""

#: ../../performance.rst:504
msgid "Managing the caches"
msgstr ""

#: ../../performance.rst:506
msgid ""
"Whenever you pass an object to ``Save()``, ``Update()`` or "
"``SaveOrUpdate()`` and whenever you retrieve an object using ``Load()``, "
"``Get()``, ``List()``, or ``Enumerable()``, that object is added to the "
"internal cache of the ``ISession``."
msgstr ""

#: ../../performance.rst:512
msgid ""
"When ``Flush()`` is subsequently called, the state of that object will be "
"synchronized with the database. If you do not want this synchronization to "
"occur or if you are processing a huge number of objects and need to manage "
"memory efficiently, the ``Evict()`` method may be used to remove the object "
"and its collections from the first-level cache."
msgstr ""

#: ../../performance.rst:527
msgid ""
"NHibernate will evict associated entities automatically if the association "
"is mapped with ``cascade=\"all\"`` or ``cascade=\"all-delete-orphan\"``."
msgstr ""

#: ../../performance.rst:530
msgid ""
"The ``ISession`` also provides a ``Contains()`` method to determine if an "
"instance belongs to the session cache."
msgstr ""

#: ../../performance.rst:533
msgid ""
"To completely evict all objects from the session cache, call "
"``ISession.Clear()``"
msgstr ""

#: ../../performance.rst:535
msgid ""
"For the second-level cache, there are methods defined on ``ISessionFactory``"
" for evicting the cached state of an instance, entire class, collection "
"instance or entire collection role."
msgstr ""

#: ../../performance.rst:547
msgid "The Query Cache"
msgstr ""

#: ../../performance.rst:549
msgid ""
"Query result sets may also be cached. This is only useful for queries that "
"are run frequently with the same parameters. To use the query cache you must"
" first enable it:"
msgstr ""

#: ../../performance.rst:556
msgid ""
"This setting causes the creation of two new cache regions - one holding "
"cached query result sets (``NHibernate.Cache.StandardQueryCache``), the "
"other holding timestamps of the most recent updates to queryable tables "
"(``NHibernate.Cache.UpdateTimestampsCache``). Note that the query cache does"
" not cache the state of any entities in the result set; it caches only "
"identifier values and results of value type. So the query cache should "
"always be used in conjunction with the second-level cache."
msgstr ""

#: ../../performance.rst:564
msgid ""
"Most queries do not benefit from caching, so by default queries are not "
"cached. To enable caching, call ``IQuery.SetCacheable(true)``. This call "
"allows the query to look for existing cache results or add its results to "
"the cache when it is executed."
msgstr ""

#: ../../performance.rst:569
msgid ""
"If you require fine-grained control over query cache expiration policies, "
"you may specify a named cache region for a particular query by calling "
"``IQuery.SetCacheRegion()``."
msgstr ""

#: ../../performance.rst:582
msgid ""
"If the query should force a refresh of its query cache region, you may call "
"``IQuery.SetForceCacheRefresh()`` to ``true``. This is particularly useful "
"in cases where underlying data may have been updated via a seperate process "
"(i.e., not modified through NHibernate) and allows the application to "
"selectively refresh the query cache regions based on its knowledge of those "
"events. This is a more efficient alternative to eviction of a query cache "
"region via ``ISessionFactory.EvictQueries()``."
msgstr ""

#: ../../performance.rst:591
msgid "Understanding Collection performance"
msgstr ""

#: ../../performance.rst:593
msgid ""
"We've already spent quite some time talking about collections. In this "
"section we will highlight a couple more issues about how collections behave "
"at runtime."
msgstr ""

#: ../../performance.rst:598
msgid "Taxonomy"
msgstr ""

#: ../../performance.rst:600
msgid "NHibernate defines three basic kinds of collections:"
msgstr ""

#: ../../performance.rst:602
msgid "collections of values"
msgstr ""

#: ../../performance.rst:604
msgid "one to many associations"
msgstr ""

#: ../../performance.rst:606
msgid "many to many associations"
msgstr ""

#: ../../performance.rst:608
msgid ""
"This classification distinguishes the various table and foreign key "
"relationships but does not tell us quite everything we need to know about "
"the relational model. To fully understand the relational structure and "
"performance characteristics, we must also consider the structure of the "
"primary key that is used by NHibernate to update or delete collection rows. "
"This suggests the following classification:"
msgstr ""

#: ../../performance.rst:615
msgid "indexed collections"
msgstr ""

#: ../../performance.rst:617
msgid "sets"
msgstr ""

#: ../../performance.rst:619
msgid "bags"
msgstr ""

#: ../../performance.rst:621
msgid ""
"All indexed collections (maps, lists, arrays) have a primary key consisting "
"of the ``<key>`` and ``<index>`` columns. In this case collection updates "
"are usually extremely efficient - the primary key may be efficiently indexed"
" and a particular row may be efficiently located when NHibernate tries to "
"update or delete it."
msgstr ""

#: ../../performance.rst:627
msgid ""
"Sets have a primary key consisting of ``<key>`` and element columns. This "
"may be less efficient for some types of collection element, particularly "
"composite elements or large text or binary fields; the database may not be "
"able to index a complex primary key as efficently.  On the other hand, for "
"one to many or many to many associations, particularly in the case of "
"synthetic identifiers, it is likely to be just as efficient. (Side-note: if "
"you want ``SchemaExport`` to actually create the primary key of a ``<set>`` "
"for you, you must declare all columns as ``not-null=\"true\"``.)"
msgstr ""

#: ../../performance.rst:636
msgid ""
"``<idbag>`` mappings define a surrogate key, so they are always very "
"efficient to update. In fact, they are the best case."
msgstr ""

#: ../../performance.rst:639
msgid ""
"Bags are the worst case. Since a bag permits duplicate element values and "
"has no index column, no primary key may be defined. NHibernate has no way of"
" distinguishing between duplicate rows. NHibernate resolves this problem by "
"completely removing (in a single ``DELETE``) and recreating the collection "
"whenever it changes. This might be very inefficient."
msgstr ""

#: ../../performance.rst:645
msgid ""
"Note that for a one-to-many association, the \"primary key\" may not be the "
"physical primary key of the database table - but even in this case, the "
"above classification is still useful. (It still reflects how NHibernate "
"\"locates\" individual rows of the collection.)"
msgstr ""

#: ../../performance.rst:651
msgid ""
"Lists, maps, idbags and sets are the most efficient collections to update"
msgstr ""

#: ../../performance.rst:653
msgid ""
"From the discussion above, it should be clear that indexed collections and "
"(usually) sets allow the most efficient operation in terms of adding, "
"removing and updating elements."
msgstr ""

#: ../../performance.rst:657
msgid ""
"There is, arguably, one more advantage that indexed collections have over "
"sets for many to many associations or collections of values. Because of the "
"structure of an ``ISet``, NHibernate doesn't ever ``UPDATE`` a row when an "
"element is \"changed\". Changes to an ``ISet`` always work via ``INSERT`` "
"and ``DELETE`` (of individual rows). Once again, this consideration does not"
" apply to one to many associations."
msgstr ""

#: ../../performance.rst:664
msgid ""
"After observing that arrays cannot be lazy, we would conclude that lists, "
"maps and idbags are the most performant (non-inverse) collection types, with"
" sets not far behind. Sets are expected to be the most common kind of "
"collection in NHibernate applications. This is because the \"set\" semantics"
" are most natural in the relational model."
msgstr ""

#: ../../performance.rst:670
msgid ""
"However, in well-designed NHibernate domain models, we usually see that most"
" collections are in fact one-to-many associations with ``inverse=\"true\"``."
" For these associations, the update is handled by the many-to-one end of the"
" association, and so considerations of collection update performance simply "
"do not apply."
msgstr ""

#: ../../performance.rst:676
msgid "Bags and lists are the most efficient inverse collections"
msgstr ""

#: ../../performance.rst:678
msgid ""
"Just before you ditch bags forever, there is a particular case in which bags"
" (and also lists) are much more performant than sets. For a collection with "
"``inverse=\"true\"`` (the standard bidirectional one-to-many relationship "
"idiom, for example) we can add elements to a bag or list without needing to "
"initialize (fetch) the bag elements! This is because ``IList.Add()`` must "
"always succeed for a bag or ``IList`` (unlike an ``ISet``). This can make "
"the following common code much faster."
msgstr ""

#: ../../performance.rst:694
msgid "One shot delete"
msgstr ""

#: ../../performance.rst:696
msgid ""
"Occasionally, deleting collection elements one by one can be extremely "
"inefficient. NHibernate isn't completely stupid, so it knows not to do that "
"in the case of an newly-empty collection (if you called ``list.Clear()``, "
"for example). In this case, NHibernate will issue a single ``DELETE`` and we"
" are done!"
msgstr ""

#: ../../performance.rst:701
msgid ""
"Suppose we add a single element to a collection of size twenty and then "
"remove two elements. NHibernate will issue one ``INSERT`` statement and two "
"``DELETE`` statements (unless the collection is a bag). This is certainly "
"desirable."
msgstr ""

#: ../../performance.rst:705
msgid ""
"However, suppose that we remove eighteen elements, leaving two and then add "
"thee new elements. There are two possible ways to proceed:"
msgstr ""

#: ../../performance.rst:708
msgid "Delete eighteen rows one by one and then insert three rows"
msgstr ""

#: ../../performance.rst:710
msgid ""
"Remove the whole collection (in one SQL ``DELETE``) and insert all five "
"current elements (one by one)"
msgstr ""

#: ../../performance.rst:713
msgid ""
"NHibernate isn't smart enough to know that the second option is probably "
"quicker in this case. (And it would probably be undesirable for NHibernate "
"to be that smart; such behaviour might confuse database triggers, etc.)"
msgstr ""

#: ../../performance.rst:717
msgid ""
"Fortunately, you can force this behaviour (ie. the second strategy) at any "
"time by discarding (ie. dereferencing) the original collection and returning"
" a newly instantiated collection with all the current elements. This can be "
"very useful and powerful from time to time."
msgstr ""

#: ../../performance.rst:721
msgid ""
"Of course, one-shot-delete does not apply to collections mapped "
"``inverse=\"true\"``."
msgstr ""

#: ../../performance.rst:724
msgid "Batch updates"
msgstr ""

#: ../../performance.rst:726
msgid ""
"NHibernate supports batching SQL update commands (``INSERT``, ``UPDATE``, "
"``DELETE``) with the following limitations:"
msgstr ""

#: ../../performance.rst:729
msgid "the Nhibernate's drive used for your RDBMS may not supports batching,"
msgstr ""

#: ../../performance.rst:731
msgid ""
"since the implementation uses reflection to access members and types in "
"System.Data assembly which are not normally visible, it may not function in "
"environments where necessary permissions are not granted,"
msgstr ""

#: ../../performance.rst:735
msgid ""
"optimistic concurrency checking may be impaired since ADO.NET 2.0 does not "
"return the number of rows affected by each statement in the batch, only the "
"total number of rows affected by the batch."
msgstr ""

#: ../../performance.rst:739
msgid ""
"Update batching is enabled by setting ``adonet.batch_size`` to a non-zero "
"value."
msgstr ""

#: ../../performance.rst:743
msgid "Multi Query"
msgstr ""

#: ../../performance.rst:745
msgid ""
"This functionality allows you to execute several HQL queries in one round-"
"trip against the database server. A simple use case is executing a paged "
"query while also getting the total count of results, in a single round-trip."
" Here is a simple example:"
msgstr ""

#: ../../performance.rst:761
msgid ""
"The result is a list of query results, ordered according to the order of "
"queries added to the multi query. Named parameters can be set on the multi "
"query, and are shared among all the queries contained in the multi query, "
"like this:"
msgstr ""

#: ../../performance.rst:776
msgid ""
"Positional parameters are not supported on the multi query, only on the "
"individual queries."
msgstr ""

#: ../../performance.rst:779
msgid ""
"As shown above, if you do not need to configure the query separately, you "
"can simply pass the HQL directly to the ``IMultiQuery.Add()`` method."
msgstr ""

#: ../../performance.rst:782
msgid ""
"Multi query is executed by concatenating the queries and sending the query "
"to the database as a single string. This means that the database should "
"support returning several result sets in a single query. At the moment this "
"functionality is only enabled for Microsoft SQL Server and SQLite."
msgstr ""

#: ../../performance.rst:786
msgid ""
"Note that the database server is likely to impose a limit on the maximum "
"number of parameters in a query, in which case the limit applies to the "
"multi query as a whole. Queries using ``in`` with a large number of "
"arguments passed as parameters may easily exceed this limit. For example, "
"SQL Server has a limit of 2,100 parameters per round-trip, and will throw an"
" exception executing this query:"
msgstr ""

#: ../../performance.rst:802
msgid ""
"An interesting usage of this feature is to load several collections of an "
"object in one round-trip, without an expensive cartesian product (blog * "
"users * posts)."
msgstr ""

#: ../../performance.rst:814
msgid "Multi Criteria"
msgstr ""

#: ../../performance.rst:816
msgid ""
"This is the counter-part to Multi Query, and allows you to perform several "
"criteria queries in a single round trip. A simple use case is executing a "
"paged query while also getting the total count of results, in a single "
"round-trip. Here is a simple example:"
msgstr ""

#: ../../performance.rst:834
msgid ""
"The result is a list of query results, ordered according to the order of "
"queries added to the multi criteria."
msgstr ""

#: ../../performance.rst:837
msgid ""
"You can add ``ICriteria`` or ``DetachedCriteria`` to the Multi Criteria "
"query. In fact, using DetachedCriteria in this fashion has some interesting "
"implications."
msgstr ""

#: ../../performance.rst:854
msgid ""
"As you see, we get a query that represnt the customers we can access, and "
"then we can utlize this query further in order to perform additional logic "
"(getting the policies of the customers we are associated with), all in a "
"single database roundtrip."
msgstr ""
