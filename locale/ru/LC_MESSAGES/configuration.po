# 
msgid ""
msgstr ""
"Project-Id-Version: NHibernate Object Relational Mapper 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-28 22:06+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../configuration.rst:5
msgid "ISessionFactory Configuration"
msgstr ""

#: ../../configuration.rst:7
msgid ""
"Because NHibernate is designed to operate in many different environments, "
"there are a large number of configuration parameters. Fortunately, most have"
" sensible default values and NHibernate is distributed with an example "
"``App.config`` file (found in ``src\\\\NHibernate.Test``) that shows the "
"various options. You usually only have to put that file in your project and "
"customize it."
msgstr ""

#: ../../configuration.rst:15
msgid "Programmatic Configuration"
msgstr ""

#: ../../configuration.rst:17
msgid ""
"An instance of ``NHibernate.Cfg.Configuration`` represents an entire set of "
"mappings of an application's .NET types to a SQL database. The "
"``Configuration`` is used to build an (immutable) ``ISessionFactory``. The "
"mappings are compiled from various XML mapping files."
msgstr ""

#: ../../configuration.rst:23
msgid ""
"You may obtain a ``Configuration`` instance by instantiating it directly. "
"Heres an example of setting up a datastore from mappings defined in two XML "
"configuration files:"
msgstr ""

#: ../../configuration.rst:33
msgid ""
"An alternative (sometimes better) way is to let NHibernate load a mapping "
"file from an embedded resource:"
msgstr ""

#: ../../configuration.rst:42
msgid ""
"Then NHibernate will look for mapping files named "
"``NHibernate.Auction.Item.hbm.xml`` and ``NHibernate.Auction.Bid.hbm.xml`` "
"embedded as resources in the assembly that the types are contained in. This "
"approach eliminates any hardcoded filenames."
msgstr ""

#: ../../configuration.rst:48
msgid ""
"Another alternative (probably the best) way is to let NHibernate load all of"
" the mapping files contained in an Assembly:"
msgstr ""

#: ../../configuration.rst:56
msgid ""
"Then NHibernate will look through the assembly for any resources that end "
"with ``.hbm.xml``.  This approach eliminates any hardcoded filenames and "
"ensures the mapping files in the assembly get added."
msgstr ""

#: ../../configuration.rst:61
msgid ""
"If a tool like Visual Studio .NET or NAnt is used to build the assembly, "
"then make sure that the ``.hbm.xml`` files are compiled into the assembly as"
" ``Embedded Resources``."
msgstr ""

#: ../../configuration.rst:65
msgid "A ``Configuration`` also specifies various optional properties:"
msgstr ""

#: ../../configuration.rst:76
msgid ""
"A ``Configuration`` is intended as a configuration-time object, to be "
"discarded once an ``ISessionFactory`` is built."
msgstr ""

#: ../../configuration.rst:80
msgid "Obtaining an ISessionFactory"
msgstr ""

#: ../../configuration.rst:82
msgid ""
"When all mappings have been parsed by the ``Configuration``, the application"
" must obtain a factory for ``ISession`` instances. This factory is intended "
"to be shared by all application threads:"
msgstr ""

#: ../../configuration.rst:90
msgid ""
"However, NHibernate does allow your application to instantiate more than one"
" ``ISessionFactory``. This is useful if you are using more than one "
"database."
msgstr ""

#: ../../configuration.rst:94
msgid "User provided ADO.NET connection"
msgstr ""

#: ../../configuration.rst:96
msgid ""
"An ``ISessionFactory`` may open an ``ISession`` on a user-provided ADO.NET "
"connection. This design choice frees the application to obtain ADO.NET "
"connections wherever it pleases:"
msgstr ""

#: ../../configuration.rst:107
msgid ""
"The application must be careful not to open two concurrent ``ISession`` on "
"the same ADO.NET connection!"
msgstr ""

#: ../../configuration.rst:111
msgid "NHibernate provided ADO.NET connection"
msgstr ""

#: ../../configuration.rst:113
msgid ""
"Alternatively, you can have the ``ISessionFactory`` open connections for "
"you. The ``ISessionFactory`` must be provided with ADO.NET connection "
"properties in one of the following ways:"
msgstr ""

#: ../../configuration.rst:118
msgid ""
"Pass an instance of ``IDictionary`` mapping property names to property "
"values to ``Configuration.SetProperties()``."
msgstr ""

#: ../../configuration.rst:122
msgid ""
"Add the properties to a configuration section in the application "
"configuration file. The section should be named ``nhibernate`` and its "
"handler set to ``System.Configuration.NameValueSectionHandler``."
msgstr ""

#: ../../configuration.rst:126
msgid ""
"Include ``<property>`` elements in a configuration section in the "
"application configuration file. The section should be named ``hibernate-"
"configuration`` and its handler set to "
"``NHibernate.Cfg.ConfigurationSectionHandler``. The XML namespace of the "
"section should be set to ``urn:nhibernate-configuration-2.2``."
msgstr ""

#: ../../configuration.rst:133
msgid ""
"Include ``<property>`` elements in ``hibernate.cfg.xml`` (discussed later)."
msgstr ""

#: ../../configuration.rst:136
msgid "If you take this approach, opening an ``ISession`` is as simple as:"
msgstr ""

#: ../../configuration.rst:143
msgid ""
"All NHibernate property names and semantics are defined on the class "
"``NHibernate.Cfg.Environment``. We will now describe the most important "
"settings for ADO.NET connection configuration."
msgstr ""

#: ../../configuration.rst:147
msgid ""
"NHibernate will obtain (and pool) connections using an ADO.NET data provider"
" if you set the following properties:"
msgstr ""

#: ../../configuration.rst:150
msgid "NHibernate ADO.NET Properties"
msgstr ""

#: ../../configuration.rst:153 ../../configuration.rst:217
msgid "Property name"
msgstr ""

#: ../../configuration.rst:153 ../../configuration.rst:217
msgid "Purpose"
msgstr ""

#: ../../configuration.rst:155
msgid "``connection.provider_class``"
msgstr ""

#: ../../configuration.rst:155
msgid ""
"The type of a custom ``IConnectionProvider``.    *eg.*  "
"``full.classname.of.ConnectionProvider`` if the Provider  is built into "
"NHibernate, or ``full.classname.of.ConnectionProvider,  assembly`` if using "
"an implementation of ``IConnectionProvider`` not included in NHibernate."
msgstr ""

#: ../../configuration.rst:156
msgid "``connection.driver_class``"
msgstr ""

#: ../../configuration.rst:156
msgid ""
"The type of a custom ``IDriver``, if using ``DriverConnectionProvider``.    "
"``full.classname.of.Driver`` if the Driver  is built into NHibernate, or "
"``full.classname.of.Driver, assembly``  if using an implementation of "
"IDriver not included in NHibernate.     This is usually not needed, most of "
"the time the ``dialect`` will take care of setting the ``IDriver`` using a "
"sensible default.  See the API documentation of the specific dialect for the"
" defaults."
msgstr ""

#: ../../configuration.rst:157
msgid "``connection.connection_string``"
msgstr ""

#: ../../configuration.rst:157
msgid "Connection string to use to obtain the connection."
msgstr ""

#: ../../configuration.rst:158
msgid "``connection.connection_string_name``"
msgstr ""

#: ../../configuration.rst:158
msgid ""
"The name of the connection string (defined in ``<connectionStrings>`` "
"configuration file element) to use to obtain the connection."
msgstr ""

#: ../../configuration.rst:159
msgid "``connection.isolation``"
msgstr ""

#: ../../configuration.rst:159
msgid ""
"Set the ADO.NET transaction isolation level. Check "
"``System.Data.IsolationLevel`` for meaningful values  and the database's "
"documentation to ensure that level is supported.    *eg.*  ``Chaos, "
"ReadCommitted, ReadUncommitted, RepeatableRead, Serializable, Unspecified``"
msgstr ""

#: ../../configuration.rst:160
msgid "``connection.release_mode``"
msgstr ""

#: ../../configuration.rst:160
msgid ""
"Specify when NHibernate should release ADO.NET connections. See :ref"
":`transactions-connection-release`.    *eg.*  ``auto`` (default) | "
"``on_close`` | ``after_transaction``     Note that this setting only affects"
" ``ISession`` returned from ``ISessionFactory.OpenSession``.  For "
"``ISession`` obtained through ``ISessionFactory.GetCurrentSession``, the "
"``ICurrentSessionContext`` implementation configured for use controls the "
"connection release mode for those ``ISession``. See :ref:`architecture-"
"current-session`."
msgstr ""

#: ../../configuration.rst:161
msgid "``command_timeout``"
msgstr ""

#: ../../configuration.rst:161
msgid ""
"Specify the default timeout of ``IDbCommands`` generated by NHibernate."
msgstr ""

#: ../../configuration.rst:162
msgid "``adonet.batch_size``"
msgstr ""

#: ../../configuration.rst:162
msgid ""
"Specify the batch size to use when batching update statements. Setting this "
"to 0 (the default) disables the functionality. See :ref:`performance-batch-"
"updates`."
msgstr ""

#: ../../configuration.rst:165
msgid ""
"This is an example of how to specify the database connection properties "
"inside a ``web.config``:"
msgstr ""

#: ../../configuration.rst:194
msgid ""
"NHibernate relies on the ADO.NET data provider implementation of connection "
"pooling."
msgstr ""

#: ../../configuration.rst:196
msgid ""
"You may define your own plugin strategy for obtaining ADO.NET connections by"
" implementing the interface ``NHibernate.Connection.IConnectionProvider``. "
"You may select a custom implementation by setting "
"``connection.provider_class``."
msgstr ""

#: ../../configuration.rst:201
msgid "Optional configuration properties"
msgstr ""

#: ../../configuration.rst:203
msgid ""
"There are a number of other properties that control the behaviour of "
"NHibernate at runtime. All are optional and have reasonable default values."
msgstr ""

#: ../../configuration.rst:206
msgid ""
"System-level properties can only be set manually by setting static "
"properties of ``NHibernate.Cfg.Environment`` class or be defined in the "
"``<nhibernate>`` section of the application configuration file. These "
"properties cannot be set using ``Configuration.SetProperties`` or be defined"
" in the ``<hibernate-configuration>`` section of the application "
"configuration file."
msgstr ""

#: ../../configuration.rst:214
msgid "NHibernate Configuration Properties"
msgstr ""

#: ../../configuration.rst:219
msgid "``dialect``"
msgstr ""

#: ../../configuration.rst:219
msgid ""
"The classname of a NHibernate ``Dialect`` - enables certain platform "
"dependent features.    *eg.*  ``full.classname.of.Dialect, assembly``"
msgstr ""

#: ../../configuration.rst:220
msgid "``default_schema``"
msgstr ""

#: ../../configuration.rst:220
msgid ""
"Qualify unqualified tablenames with the given schema/tablespace in generated"
" SQL.    *eg.*  ``SCHEMA_NAME``"
msgstr ""

#: ../../configuration.rst:221
msgid "``max_fetch_depth``"
msgstr ""

#: ../../configuration.rst:221
msgid ""
"Set a maximum \"depth\" for the outer join fetch tree for single-ended "
"associations (one-to-one, many-to-one). A ``0`` disables default outer join "
"fetching.    *eg.*  recommended values between ``0`` and ``3``"
msgstr ""

#: ../../configuration.rst:222
msgid "``use_reflection_optimizer``"
msgstr ""

#: ../../configuration.rst:222
msgid ""
"Enables use of a runtime-generated class to set or get properties of an "
"entity or component instead of using runtime reflection (System-level "
"property). The use of the reflection optimizer inflicts a certain startup "
"cost on the application but should lead to better performance in the long "
"run. You can not set this property in ``hibernate.cfg.xml`` or ``<hibernate-"
"configuration>`` section of the application configuration file.    *eg.*  "
"``true`` | ``false``"
msgstr ""

#: ../../configuration.rst:223
msgid "``bytecode.provider``"
msgstr ""

#: ../../configuration.rst:223
msgid ""
"Specifies the bytecode provider to use to optimize the use of reflection in "
"NHibernate. Use ``null`` to disable the optimization completely, ``lcg`` to "
"use lightweight code generation.     *eg.* ``null`` | ``lcg``"
msgstr ""

#: ../../configuration.rst:224
msgid "``cache.provider_class``"
msgstr ""

#: ../../configuration.rst:224
msgid ""
"The classname of a custom ``ICacheProvider``.    *eg.*  "
"``classname.of.CacheProvider, assembly``"
msgstr ""

#: ../../configuration.rst:225
msgid "``cache.use_minimal_puts``"
msgstr ""

#: ../../configuration.rst:225
msgid ""
"Optimize second-level cache operation to minimize writes, at the cost of "
"more frequent reads (useful for clustered caches).    *eg.*  ``true`` | "
"``false``"
msgstr ""

#: ../../configuration.rst:226
msgid "``cache.use_query_cache``"
msgstr ""

#: ../../configuration.rst:226
msgid ""
"Enable the query cache, individual queries still have to be set cacheable."
"    *eg.*  ``true`` | ``false``"
msgstr ""

#: ../../configuration.rst:227
msgid "``cache.query_cache_factory``"
msgstr ""

#: ../../configuration.rst:227
msgid ""
"The classname of a custom ``IQueryCacheFactory`` interface, defaults to the "
"built-in ``StandardQueryCacheFactory``.    *eg.* "
"``classname.of.QueryCacheFactory, assembly``"
msgstr ""

#: ../../configuration.rst:228
msgid "``cache.region_prefix``"
msgstr ""

#: ../../configuration.rst:228
msgid ""
"A prefix to use for second-level cache region names.    *eg.*  ``prefix``"
msgstr ""

#: ../../configuration.rst:229
msgid "``query.substitutions``"
msgstr ""

#: ../../configuration.rst:229
msgid ""
"Mapping from tokens in NHibernate queries to SQL tokens (tokens might be "
"function or literal names, for example).    *eg.*  ``hqlLiteral=SQL_LITERAL,"
" hqlFunction=SQLFUNC``"
msgstr ""

#: ../../configuration.rst:230
msgid "``show_sql``"
msgstr ""

#: ../../configuration.rst:230
msgid "Write all SQL statements to console.    *eg.*  ``true`` | ``false``"
msgstr ""

#: ../../configuration.rst:231
msgid "``hbm2ddl.auto``"
msgstr ""

#: ../../configuration.rst:231
msgid ""
"Automatically export schema DDL to the database when the ``ISessionFactory``"
" is created. With ``create-drop``, the database schema will be dropped when "
"the ``ISessionFactory`` is closed explicitly.    *eg.*  ``create`` | "
"``create-drop``"
msgstr ""

#: ../../configuration.rst:232
msgid "``hbm2ddl.keywords``"
msgstr ""

#: ../../configuration.rst:232
msgid ""
"Automatically import ``reserved/keywords`` from the database when the "
"``ISessionFactory`` is created.    *none :* disable any operation regarding "
"RDBMS KeyWords     *keywords :* imports all RDBMS KeyWords where the "
"``Dialect`` can provide the implementation of ``IDataBaseSchema``.     "
"*auto-quote :* imports all RDBMS KeyWords and auto-quote all table-names"
"/column-names .     *eg.* ``none`` | ``keywords`` | ``auto-quote``"
msgstr ""

#: ../../configuration.rst:233
msgid "``use_proxy_validator``"
msgstr ""

#: ../../configuration.rst:233
msgid ""
"Enables or disables validation of interfaces or classes specified as "
"proxies. Enabled by default.    *eg.*  ``true`` | ``false``"
msgstr ""

#: ../../configuration.rst:234
msgid "``transaction.factory_class``"
msgstr ""

#: ../../configuration.rst:234
msgid ""
"The classname of a custom ``ITransactionFactory`` implementation, defaults "
"to the built-in ``AdoNetWithDistributedTransactionFactory``.    *eg.*  "
"``classname.of.TransactionFactory, assembly``"
msgstr ""

#: ../../configuration.rst:238
msgid "SQL Dialects"
msgstr ""

#: ../../configuration.rst:240
msgid ""
"You should always set the ``dialect`` property to the correct "
"``NHibernate.Dialect.Dialect`` subclass for your database. This is not "
"strictly essential unless you wish to use ``native`` or ``sequence`` primary"
" key generation or pessimistic locking (with, eg. ``ISession.Lock()`` or "
"``IQuery.SetLockMode()``). However, if you specify a dialect, NHibernate "
"will use sensible defaults for some of the other properties listed above, "
"saving you the effort of specifying them manually."
msgstr ""

#: ../../configuration.rst:248
msgid "NHibernate SQL Dialects ("
msgstr ""

#: ../../configuration.rst:251
msgid "RDBMS"
msgstr ""

#: ../../configuration.rst:251
msgid "Dialect"
msgstr ""

#: ../../configuration.rst:251
msgid "Remarks"
msgstr ""

#: ../../configuration.rst:253
msgid "DB2"
msgstr ""

#: ../../configuration.rst:253
msgid "``NHibernate.Dialect.DB2Dialect``"
msgstr ""

#: ../../configuration.rst:254
msgid "DB2 for iSeries (OS/400)"
msgstr ""

#: ../../configuration.rst:254
msgid "``NHibernate.Dialect.DB2400Dialect``"
msgstr ""

#: ../../configuration.rst:255
msgid "Ingres"
msgstr ""

#: ../../configuration.rst:255
msgid "``NHibernate.Dialect.IngresDialect``"
msgstr ""

#: ../../configuration.rst:256
msgid "PostgreSQL"
msgstr ""

#: ../../configuration.rst:256
msgid "``NHibernate.Dialect.PostgreSQLDialect``"
msgstr ""

#: ../../configuration.rst:257
msgid "PostgreSQL 8.1"
msgstr ""

#: ../../configuration.rst:257
msgid "``NHibernate.Dialect.PostgreSQL81Dialect``"
msgstr ""

#: ../../configuration.rst:257
msgid ""
"This dialect supports ``FOR UPDATE NOWAIT`` available in PostgreSQL 8.1."
msgstr ""

#: ../../configuration.rst:258
msgid "PostgreSQL 8.2"
msgstr ""

#: ../../configuration.rst:258
msgid "``NHibernate.Dialect.PostgreSQL82Dialect``"
msgstr ""

#: ../../configuration.rst:258
msgid ""
"This dialect supports ``IF EXISTS`` keyword in ``DROP TABLE`` and ``DROP "
"SEQUENCE`` available in PostgreSQL 8.2."
msgstr ""

#: ../../configuration.rst:259
msgid "MySQL 3 or 4"
msgstr ""

#: ../../configuration.rst:259
msgid "``NHibernate.Dialect.MySQLDialect``"
msgstr ""

#: ../../configuration.rst:260
msgid "MySQL 5"
msgstr ""

#: ../../configuration.rst:260
msgid "``NHibernate.Dialect.MySQL5Dialect``"
msgstr ""

#: ../../configuration.rst:261
msgid "Oracle"
msgstr ""

#: ../../configuration.rst:261
msgid "``NHibernate.Dialect.Oracle8iDialect``"
msgstr ""

#: ../../configuration.rst:262
msgid "Oracle 9"
msgstr ""

#: ../../configuration.rst:262
msgid "``NHibernate.Dialect.Oracle9iDialect``"
msgstr ""

#: ../../configuration.rst:263
msgid "Oracle 10g"
msgstr ""

#: ../../configuration.rst:263
msgid "``NHibernate.Dialect.Oracle10gDialect``"
msgstr ""

#: ../../configuration.rst:264
msgid "Sybase Adaptive Server Enterprise 15"
msgstr ""

#: ../../configuration.rst:264
msgid "``NHibernate.Dialect.SybaseASE15Dialect``"
msgstr ""

#: ../../configuration.rst:265
msgid "Sybase Adaptive Server Anywhere 9"
msgstr ""

#: ../../configuration.rst:265
msgid "``NHibernate.Dialect.SybaseASA9Dialect``"
msgstr ""

#: ../../configuration.rst:266
msgid "Sybase SQL Anywhere 10"
msgstr ""

#: ../../configuration.rst:266
msgid "``NHibernate.Dialect.SybaseSQLAnywhere10Dialect``"
msgstr ""

#: ../../configuration.rst:267
msgid "Sybase SQL Anywhere 11"
msgstr ""

#: ../../configuration.rst:267
msgid "``NHibernate.Dialect.SybaseSQLAnywhere11Dialect``"
msgstr ""

#: ../../configuration.rst:268
msgid "Microsoft SQL Server 7"
msgstr ""

#: ../../configuration.rst:268
msgid "``NHibernate.Dialect.MsSql7Dialect``"
msgstr ""

#: ../../configuration.rst:269
msgid "Microsoft SQL Server 2000"
msgstr ""

#: ../../configuration.rst:269
msgid "``NHibernate.Dialect.MsSql2000Dialect``"
msgstr ""

#: ../../configuration.rst:270
msgid "Microsoft SQL Server 2005"
msgstr ""

#: ../../configuration.rst:270
msgid "``NHibernate.Dialect.MsSql2005Dialect``"
msgstr ""

#: ../../configuration.rst:271
msgid "Microsoft SQL Server 2008"
msgstr ""

#: ../../configuration.rst:271
msgid "``NHibernate.Dialect.MsSql2008Dialect``"
msgstr ""

#: ../../configuration.rst:272
msgid "Microsoft SQL Server Compact Edition"
msgstr ""

#: ../../configuration.rst:272
msgid "``NHibernate.Dialect.MsSqlCeDialect``"
msgstr ""

#: ../../configuration.rst:273
msgid "Firebird"
msgstr ""

#: ../../configuration.rst:273
msgid "``NHibernate.Dialect.FirebirdDialect``"
msgstr ""

#: ../../configuration.rst:273
msgid ""
"Set ``driver_class`` to ``NHibernate.Driver.FirebirdClientDriver`` for "
"Firebird ADO.NET provider 2.0."
msgstr ""

#: ../../configuration.rst:274
msgid "SQLite"
msgstr ""

#: ../../configuration.rst:274
msgid "``NHibernate.Dialect.SQLiteDialect``"
msgstr ""

#: ../../configuration.rst:274
msgid ""
"Set ``driver_class`` to ``NHibernate.Driver.SQLite20Driver`` for "
"System.Data.SQLite provider for .NET 2.0."
msgstr ""

#: ../../configuration.rst:277
msgid ""
"Additional dialects may be available in the NHibernate.Dialect namespace."
msgstr ""

#: ../../configuration.rst:280
msgid "Outer Join Fetching"
msgstr ""

#: ../../configuration.rst:282
msgid ""
"If your database supports ANSI or Oracle style outer joins, *outer join "
"fetching* might increase performance by limiting the number of round trips "
"to and from the database (at the cost of possibly more work performed by the"
" database itself). Outer join fetching allows a graph of objects connected "
"by many-to-one, one-to-many or one-to-one associations to be retrieved in a "
"single SQL ``SELECT``."
msgstr ""

#: ../../configuration.rst:289
msgid ""
"By default, the fetched graph when loading an objects ends at leaf objects, "
"collections, objects with proxies, or where circularities occur."
msgstr ""

#: ../../configuration.rst:292
msgid ""
"For a *particular  association*, fetching may be configured (and the default"
" behaviour overridden) by setting the ``fetch`` attribute in the XML "
"mapping."
msgstr ""

#: ../../configuration.rst:296
msgid ""
"Outer join fetching may be disabled *globally* by setting the property "
"``max_fetch_depth`` to ``0``. A setting of ``1`` or higher enables outer "
"join fetching for one-to-one and many-to-one associations which have been "
"mapped with ``fetch=\"join\"``."
msgstr ""

#: ../../configuration.rst:302
msgid "See :ref:`performance-fetching` for more information."
msgstr ""

#: ../../configuration.rst:304
msgid ""
"In NHibernate 1.0, ``outer-join`` attribute could be used to achieve a "
"similar effect. This attribute is now deprecated in favor of ``fetch``."
msgstr ""

#: ../../configuration.rst:308
msgid "Custom ``ICacheProvider``"
msgstr ""

#: ../../configuration.rst:310
msgid ""
"You may integrate a process-level (or clustered) second-level cache system "
"by implementing the interface ``NHibernate.Cache.ICacheProvider``. You may "
"select the custom implementation by setting ``cache.provider_class``. See "
"the :ref:`performance-cache` for more details."
msgstr ""

#: ../../configuration.rst:317
msgid "Query Language Substitution"
msgstr ""

#: ../../configuration.rst:319
msgid ""
"You may define new NHibernate query tokens using ``query.substitutions``. "
"For example:"
msgstr ""

#: ../../configuration.rst:326
msgid ""
"would cause the tokens ``true`` and ``false`` to be translated to integer "
"literals in the generated SQL."
msgstr ""

#: ../../configuration.rst:333
msgid "would allow you to rename the SQL ``LOWER`` function."
msgstr ""

#: ../../configuration.rst:336
msgid "Logging"
msgstr ""

#: ../../configuration.rst:338
msgid "NHibernate logs various events using Apache log4net."
msgstr ""

#: ../../configuration.rst:340
msgid ""
"You may download log4net from ``http://logging.apache.org/log4net/``. To use"
" log4net you will need a ``log4net`` configuration section in the "
"application configuration file.  An example of the configuration section is "
"distributed with NHibernate in the ``src/NHibernate.Test`` project."
msgstr ""

#: ../../configuration.rst:345
msgid ""
"We strongly recommend that you familiarize yourself with NHibernate's log "
"messages. A lot of work has been put into making the NHibernate log as "
"detailed as possible, without making it unreadable. It is an essential "
"troubleshooting device. Also don't forget to enable SQL logging as described"
" above (``show_sql``), it is your first step when looking for performance "
"problems."
msgstr ""

#: ../../configuration.rst:353
msgid "Implementing an ``INamingStrategy``"
msgstr ""

#: ../../configuration.rst:355
msgid ""
"The interface ``NHibernate.Cfg.INamingStrategy`` allows you to specify a "
"\"naming standard\" for database objects and schema elements."
msgstr ""

#: ../../configuration.rst:358
msgid ""
"You may provide rules for automatically generating database identifiers from"
" .NET identifiers or for processing \"logical\" column and table names given"
" in the mapping file into  \"physical\" table and column names. This feature"
" helps reduce the verbosity of the mapping document, eliminating repetitive "
"noise (``TBL_`` prefixes, for example). The default strategy used by "
"NHibernate is quite minimal."
msgstr ""

#: ../../configuration.rst:365
msgid ""
"You may specify a different strategy by calling "
"``Configuration.SetNamingStrategy()`` before adding mappings:"
msgstr ""

#: ../../configuration.rst:376
msgid ""
"``NHibernate.Cfg.ImprovedNamingStrategy`` is a built-in strategy that might "
"be a useful starting point for some applications."
msgstr ""

#: ../../configuration.rst:380
msgid "XML Configuration File"
msgstr ""

#: ../../configuration.rst:382
msgid ""
"An alternative approach is to specify a full configuration in a file named "
"``hibernate.cfg.xml``. This file can be used as a replacement for the "
"``<nhibernate;>`` or ``<hibernate-configuration>`` sections of the "
"application configuration file."
msgstr ""

#: ../../configuration.rst:387
msgid ""
"The XML configuration file is by default expected to be in your application "
"directory. Here is an example:"
msgstr ""

#: ../../configuration.rst:413
msgid "Configuring NHibernate is then as simple as"
msgstr ""

#: ../../configuration.rst:419
msgid "You can pick a different XML configuration file using"
msgstr ""
