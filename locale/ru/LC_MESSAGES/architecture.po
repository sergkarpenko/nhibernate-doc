# 
msgid ""
msgstr ""
"Project-Id-Version: NHibernate Object Relational Mapper 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-28 22:06+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../architecture.rst:7
msgid "Architecture"
msgstr ""

#: ../../architecture.rst:10
msgid "Overview"
msgstr ""

#: ../../architecture.rst:12
msgid "A (very) high-level view of the NHibernate architecture:"
msgstr ""

#: ../../architecture.rst:16
msgid ""
"This diagram shows NHibernate using the database and configuration data to "
"provide persistence services (and persistent objects) to the application."
msgstr ""

#: ../../architecture.rst:19
msgid ""
"We would like to show a more detailed view of the runtime architecture. "
"Unfortunately, NHibernate is flexible and supports several approaches. We "
"will show the two extremes. The \"lite\" architecture has the application "
"provide its own ADO.NET connections and manage its own transactions. This "
"approach uses a minimal subset of NHibernate's APIs:"
msgstr ""

#: ../../architecture.rst:27
msgid ""
"The \"full cream\" architecture abstracts the application away from the "
"underlying ADO.NET APIs and lets NHibernate take care of the details."
msgstr ""

#: ../../architecture.rst:32
msgid "Heres some definitions of the objects in the diagrams:"
msgstr ""

#: ../../architecture.rst:39
msgid "ISessionFactory (``NHibernate.ISessionFactory``)"
msgstr ""

#: ../../architecture.rst:35
msgid ""
"A threadsafe (immutable) cache of compiled mappings for a single database. A"
" factory for ``ISession`` and a client of ``IConnectionProvider``. Might "
"hold an optional (second-level) cache of data that is reusable between "
"transactions, at a process- or cluster-level."
msgstr ""

#: ../../architecture.rst:46
msgid "ISession (``NHibernate.ISession``)"
msgstr ""

#: ../../architecture.rst:42
msgid ""
"A single-threaded, short-lived object representing a conversation between "
"the application and the persistent store. Wraps an ADO.NET connection. "
"Factory for ``ITransaction``. Holds a mandatory (first-level) cache of "
"persistent objects, used when navigating the object graph or looking up "
"objects by identifier."
msgstr ""

#: ../../architecture.rst:54
msgid "Persistent Objects and Collections"
msgstr ""

#: ../../architecture.rst:49
msgid ""
"Short-lived, single threaded objects containing persistent state and "
"business function. These might be ordinary POCOs, the only special thing "
"about them is that they are currently associated with (exactly one) "
"``ISession``. As soon as the ``Session`` is closed, they will be detached "
"and free to use in any application layer (e.g. directly as data transfer "
"objects to and from presentation)."
msgstr ""

#: ../../architecture.rst:60
msgid "Transient Objects and Collections"
msgstr ""

#: ../../architecture.rst:57
msgid ""
"Instances of persistent classes that are not currently associated with a "
"``ISession``. They may have been instantiated by the application and not "
"(yet) persisted or they may have been instantiated by a closed ``ISession``."
msgstr ""

#: ../../architecture.rst:66
msgid "ITransaction (``NHibernate.ITransaction``)"
msgstr ""

#: ../../architecture.rst:63
msgid ""
"(Optional) A single-threaded, short-lived object used by the application to "
"specify atomic units of work. Abstracts application from underlying ADO.NET "
"transaction. An ``ISession`` might span several ``ITransaction`` in some "
"cases."
msgstr ""

#: ../../architecture.rst:72
msgid "IConnectionProvider (``NHibernate.Connection.IConnectionProvider``)"
msgstr ""

#: ../../architecture.rst:69
msgid ""
"(Optional) A factory for ADO.NET connections and commands. Abstracts "
"application from the concrete vendor-specific implementations of "
"``IDbConnection`` and ``IDbCommand``. Not exposed to application, but can be"
" extended/implemented by the developer."
msgstr ""

#: ../../architecture.rst:76
msgid "IDriver (``NHibernate.Driver.IDriver``)"
msgstr ""

#: ../../architecture.rst:75
msgid ""
"(Optional) An interface encapsulating differences between ADO.NET providers,"
" such as parameter naming conventions and supported ADO.NET features."
msgstr ""

#: ../../architecture.rst:80
msgid "ITransactionFactory (``NHibernate.Transaction.ITransactionFactory``)"
msgstr ""

#: ../../architecture.rst:79
msgid ""
"(Optional) A factory for ``ITransaction`` instances. Not exposed to the "
"application, but can be extended/implemented by the developer."
msgstr ""

#: ../../architecture.rst:82
msgid ""
"Given a \"lite\" architecture, the application bypasses the "
"``ITransaction``/``ITransactionFactory`` and/or ``IConnectionProvider`` APIs"
" to talk to ADO.NET directly."
msgstr ""

#: ../../architecture.rst:87
msgid "Instance states"
msgstr ""

#: ../../architecture.rst:89
msgid ""
"An instance of a persistent classes may be in one of three different states,"
" which are defined with respect to a *persistence context*. The NHibernate "
"``ISession`` object is the persistence context:"
msgstr ""

#: ../../architecture.rst:96
msgid "transient"
msgstr ""

#: ../../architecture.rst:94
msgid ""
"The instance is not, and has never been associated with any persistence "
"context. It has no persistent identity (primary key value)."
msgstr ""

#: ../../architecture.rst:105
msgid "persistent"
msgstr ""

#: ../../architecture.rst:99
msgid ""
"The instance is currently associated with a persistence context. It has a "
"persistent identity (primary key value) and, perhaps, a corresponding row in"
" the database. For a particular persistence context, NHibernate *guarantees*"
" that persistent identity is equivalent to CLR identity (in-memory location "
"of the object)."
msgstr ""

#: ../../architecture.rst:114
msgid "detached"
msgstr ""

#: ../../architecture.rst:108
msgid ""
"The instance was once associated with a persistence context, but that "
"context was closed, or the instance was serialized to another process. It "
"has a persistent identity and, perhaps, a corrsponding row in the database. "
"For detached instances, NHibernate makes no guarantees about the "
"relationship between persistent identity and CLR identity."
msgstr ""

#: ../../architecture.rst:119
msgid "Contextual Sessions"
msgstr ""

#: ../../architecture.rst:121
msgid ""
"Most applications using NHibernate need some form of \"contextual\" "
"sessions, where a given session is in effect throughout the scope of a given"
" context. However, across applications the definition of what constitutes a "
"context is typically different; and different contexts define different "
"scopes to the notion of current."
msgstr ""

#: ../../architecture.rst:126
msgid ""
"Starting with version 1.2, NHibernate added the "
"``ISessionFactory.GetCurrentSession()`` method. The processing behind "
"``ISessionFactory.GetCurrentSession()`` is pluggable. An extension interface"
" (``NHibernate.Context.ICurrentSessionContext``) and a new configuration "
"parameter (``hibernate.current_session_context_class``) have been added to "
"allow pluggability of the scope and context of defining current sessions."
msgstr ""

#: ../../architecture.rst:132
msgid ""
"See the API documentation for the "
"``NHibernate.Context.ICurrentSessionContext`` interface for a detailed "
"discussion of its contract.  It defines a single method, "
"``CurrentSession()``, by which the implementation is responsible for "
"tracking the current contextual session.  Out-of-the-box, NHibernate comes "
"with several implementations of this interface:"
msgstr ""

#: ../../architecture.rst:138
msgid ""
"``NHibernate.Context.CallSessionContext`` - current sessions are tracked by "
"``CallContext``. You are responsible to bind and unbind an ``ISession`` "
"instance with static methods of class ``CurrentSessionContext``."
msgstr ""

#: ../../architecture.rst:141
msgid ""
"``NHibernate.Context.ThreadStaticSessionContext`` - current session is "
"stored in a thread-static variable. This context only supports one session "
"factory. You are responsible to bind and unbind an ``ISession`` instance "
"with static methods of class ``CurrentSessionContext``."
msgstr ""

#: ../../architecture.rst:146
msgid ""
"``NHibernate.Context.WebSessionContext`` - stores the current session in "
"``HttpContext``. You are responsible to bind and unbind an ``ISession`` "
"instance with static methods of class ``CurrentSessionContext``."
msgstr ""

#: ../../architecture.rst:151
msgid ""
"``NHibernate.Context.WcfOperationSessionContext`` - current sessions are "
"tracked by WCF ``OperationContext``. You need to register the "
"``WcfStateExtension`` extension in WCF. You are responsible to bind and "
"unbind an ``ISession`` instance with static methods of class "
"``CurrentSessionContext``."
msgstr ""

#: ../../architecture.rst:155
msgid ""
"``NHibernate.Context.ManagedWebSessionContext`` - current sessions are "
"tracked by ``HttpContext``. Removed in NHibernate 4.0 - "
"``NHibernate.Context.WebSessionContext`` should be used instead. You are "
"responsible to bind and unbind an ``ISession`` instance with static methods "
"on this class, it never opens, flushes, or closes an ``ISession`` itself."
msgstr ""

#: ../../architecture.rst:161
msgid ""
"The ``hibernate.current_session_context_class`` configuration parameter "
"defines which ``NHibernate.Context.ICurrentSessionContext`` implementation "
"should be used. Typically, the value of this parameter would just name the "
"implementation class to use (including the assembly name); for the out-of-"
"the-box implementations, however, there are corresponding short names: "
"\"call\", \"thread_static\", \"web\" and \"wcf_operation\", respectively."
msgstr ""
