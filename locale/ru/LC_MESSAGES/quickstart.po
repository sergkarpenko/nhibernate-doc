#
msgid ""
msgstr ""
"Project-Id-Version: NHibernate Object Relational Mapper 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-28 22:06+0200\n"
"PO-Revision-Date: 2014-12-28 23:39+0200\n"
"Last-Translator: Sergey Karpenko <serg.karpenko@gmail.com>\n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 1.6.10\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n"
"%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"
"Language: ru\n"

#: ../../quickstart.rst:5
msgid "Quickstart with IIS and Microsoft SQL Server"
msgstr "Быстрый старт с  IIS и Microsoft SQL Server"

#: ../../quickstart.rst:8
msgid "Getting started with NHibernate"
msgstr "Начало работы с NHibernate"

#: ../../quickstart.rst:10
msgid ""
"This tutorial explains a setup of NHibernate 2.1.0 within a Microsoft "
"environment. The tools used in this tutorial are:"
msgstr ""

#: ../../quickstart.rst:13
msgid ""
"Microsoft Internet Information Services (IIS) - web server supporting ASP."
"NET."
msgstr ""

#: ../../quickstart.rst:16
msgid ""
"Microsoft SQL Server 2005 - the database server. This tutorial uses the "
"desktop edition (SQL-EXPRESS), a free download from Microsoft. Support for "
"other databases is only a matter of changing the NHibernate SQL dialect and "
"driver configuration."
msgstr ""

#: ../../quickstart.rst:21
msgid ""
"Microsoft Visual Studio .NET (at leats 2005) - the development environment."
msgstr ""

#: ../../quickstart.rst:23
msgid ""
"First, we have to create a new Web project. We use the name ``QuickStart``, "
"the project web virtual directory will ``http://localhost/QuickStart``. In "
"the project, add a reference to ``NHibernate.dll``. Visual Studio will "
"automatically copy the library and its dependencies to the project output "
"directory. If you are using a database other than SQL Server, add a "
"reference to the driver assembly to your project."
msgstr ""

#: ../../quickstart.rst:30
msgid ""
"We now set up the database connection information for NHibernate. To do "
"this, open the file ``Web.config`` automatically generated for your project "
"and add configuration elements according to the listing below:"
msgstr ""

#: ../../quickstart.rst:64
msgid ""
"The ``<configSections>`` element contains definitions of sections that "
"follow and handlers to use to process their content. We declare the handler "
"for the configuration section here. The ``<hibernate-configuration>`` "
"section contains the configuration itself, telling NHibernate that we will "
"use a Microsoft SQL Server 2000 database and connect to it through the "
"specified connection string. The dialect is a required setting, databases "
"differ in their interpretation of the SQL \"standard\". NHibernate will take "
"care of the differences and comes bundled with dialects for several major "
"commercial and open source databases."
msgstr ""

#: ../../quickstart.rst:73
msgid ""
"An ``ISessionFactory`` is NHibernate's concept of a single datastore, "
"multiple databases can be used by creating multiple XML configuration files "
"and creating multiple ``Configuration`` and ``ISessionFactory`` objects in "
"your application."
msgstr ""

#: ../../quickstart.rst:78
msgid ""
"The last element of the ``<hibernate-configuration>`` section declares "
"``QuickStart`` as the name of an assembly containing class declarations and "
"mapping files. The mapping files contain the metadata for the mapping of the "
"POCO class to a database table (or multiple tables). We'll come back to "
"mapping files soon. Let's write the POCO class first and then declare the "
"mapping metadata for it."
msgstr ""

#: ../../quickstart.rst:86
msgid "First persistent class"
msgstr ""

#: ../../quickstart.rst:88
msgid ""
"NHibernate works best with the Plain Old CLR Objects (POCOs, sometimes "
"called Plain Ordinary CLR Objects) programming model for persistent classes. "
"A POCO has its data accessible through the standard .NET property "
"mechanisms, shielding the internal representation from the publicly visible "
"interface:"
msgstr ""

#: ../../quickstart.rst:134
msgid ""
"NHibernate is not restricted in its usage of property types, all .NET types "
"and primitives (like ``string``, ``char`` and ``DateTime``) can be mapped, "
"including classes from the ``System.Collections`` namespace. You can map "
"them as values, collections of values, or associations to other entities. "
"The ``Id`` is a special property that represents the database identifier "
"(primary key) of that class, it is highly recommended for entities like a "
"``Cat``. NHibernate can use identifiers only internally, without having to "
"declare them on the class, but we would lose some of the flexibility in our "
"application architecture."
msgstr ""

#: ../../quickstart.rst:145
msgid ""
"No special interface has to be implemented for persistent classes nor do we "
"have to subclass from a special root persistent class. NHibernate also "
"doesn't use any build time processing, such as IL manipulation, it relies "
"solely on .NET reflection and runtime class enhancement. So, without any "
"dependency in the POCO class on NHibernate, we can map it to a database "
"table."
msgstr ""

#: ../../quickstart.rst:152
msgid ""
"For the above mentioned runtime class enhancement to work, NHibernate "
"requires that all public properties of an entity class are declared as "
"``virtual``."
msgstr ""

#: ../../quickstart.rst:156
msgid "Mapping the cat"
msgstr ""

#: ../../quickstart.rst:158
msgid ""
"The ``Cat.hbm.xml`` mapping file contains the metadata required for the "
"object/relational mapping. The metadata includes declaration of persistent "
"classes and the mapping of properties (to columns and foreign key "
"relationships to other entities) to database tables."
msgstr ""

#: ../../quickstart.rst:163
msgid "Please note that the Cat.hbm.xml should be set to an embedded resource."
msgstr ""

#: ../../quickstart.rst:190
msgid ""
"Every persistent class should have an identifer attribute (actually, only "
"classes representing entities, not dependent value objects, which are mapped "
"as components of an entity). This property is used to distinguish persistent "
"objects: Two cats are equal if ``catA.Id.Equals(catB.Id)`` is true, this "
"concept is called *database identity*. NHibernate comes bundled with various "
"identifer generators for different scenarios (including native generators "
"for database sequences, hi/lo identifier tables, and application assigned "
"identifiers). We use the UUID generator (only recommended for testing, as "
"integer surrogate keys generated by the database should be prefered) and "
"also specify the column ``CatId`` of the table ``Cat`` for the NHibernate "
"generated identifier value (as a primary key of the table)."
msgstr ""

#: ../../quickstart.rst:203
msgid ""
"All other properties of ``Cat`` are mapped to the same table. In the case of "
"the ``Name`` property, we mapped it with an explicit database column "
"declaration. This is especially useful when the database schema is "
"automatically generated (as SQL DDL statements) from the mapping declaration "
"with NHibernate's *SchemaExport* tool. All other properties are mapped using "
"NHibernate's default settings, which is what you need most of the time. The "
"table ``Cat`` in the database looks like this:"
msgstr ""

#: ../../quickstart.rst:221
msgid ""
"You should now create the database and this table manually, and later read :"
"ref:`toolsetguide` if you want to automate this step with the SchemaExport "
"tool. This tool can create a full SQL DDL, including table definition, "
"custom column type constraints, unique constraints and indexes. If you are "
"using SQL Server, you should also make sure the ``ASPNET`` user has "
"permissions to use the database."
msgstr ""

#: ../../quickstart.rst:229
msgid "Playing with cats"
msgstr ""

#: ../../quickstart.rst:231
msgid ""
"We're now ready to start NHibernate's ``ISession``. It is the *persistence "
"manager* interface, we use it to store and retrieve ``Cat``s to and from the "
"database. But first, we've to get an ``ISession`` (NHibernate's unit-of-"
"work) from the ``ISessionFactory``:"
msgstr ""

#: ../../quickstart.rst:242
msgid ""
"An ``ISessionFactory`` is responsible for one database and may only use one "
"XML configuration file (``Web.config`` or ``hibernate.cfg.xml``). You can "
"set other properties (and even change the mapping metadata) by accessing the "
"``Configuration`` *before* you build the ``ISessionFactory`` (it is "
"immutable). Where do we create the ``ISessionFactory`` and how can we access "
"it in our application?"
msgstr ""

#: ../../quickstart.rst:251
msgid ""
"An ``ISessionFactory`` is usually only built once, e.g. at startup inside "
"``Application_Start`` event handler. This also means you should not keep it "
"in an instance variable in your ASP.NET pages, but in some other location. "
"Furthermore, we need some kind of *Singleton*, so we can access the "
"``ISessionFactory`` easily in application code. The approach shown next "
"solves both problems: configuration and easy access to a ``ISessionFactory``."
msgstr ""

#: ../../quickstart.rst:260
msgid "We implement a ``NHibernateHelper`` helper class:"
msgstr ""

#: ../../quickstart.rst:320
msgid ""
"This class does not only take care of the ``ISessionFactory`` with its "
"static attribute, but also has code to remember the ``ISession`` for the "
"current HTTP request."
msgstr ""

#: ../../quickstart.rst:324
msgid ""
"An ``ISessionFactory`` is threadsafe, many threads can access it "
"concurrently and request ``ISession``s. An ``ISession`` is a non-threadsafe "
"object that represents a single unit-of-work with the database. "
"``ISession``s are opened by an ``ISessionFactory`` and are closed when all "
"work is completed:"
msgstr ""

#: ../../quickstart.rst:346
msgid ""
"In an ``ISession``, every database operation occurs inside a transaction "
"that isolates the database operations (even read-only operations). We use "
"NHibernate's ``ITransaction`` API to abstract from the underlying "
"transaction strategy (in our case, ADO.NET transactions). Please note that "
"the example above does not handle any exceptions."
msgstr ""

#: ../../quickstart.rst:352
msgid ""
"Also note that you may call ``NHibernateHelper.GetCurrentSession();`` as "
"many times as you like, you will always get the current ``ISession`` of this "
"HTTP request. You have to make sure the ``ISession`` is closed after your "
"unit-of-work completes, either in ``Application_EndRequest`` event handler "
"in your application class or in a ``HttpModule`` before the HTTP response is "
"sent. The nice side effect of the latter is easy lazy initialization: the "
"``ISession`` is still open when the view is rendered, so NHibernate can load "
"unitialized objects while you navigate the graph."
msgstr ""

#: ../../quickstart.rst:361
msgid ""
"NHibernate has various methods that can be used to retrieve objects from the "
"database. The most flexible way is using the Hibernate Query Language (HQL), "
"which is an easy to learn and powerful object-oriented extension to SQL:"
msgstr ""

#: ../../quickstart.rst:378
msgid ""
"NHibernate also offers an object-oriented *query by criteria* API that can "
"be used to formulate type-safe queries. NHibernate of course uses "
"``IDbCommand``s and parameter binding for all SQL communication with the "
"database. You may also use NHibernate's direct SQL query feature or get a "
"plain ADO.NET connection from an ``ISession`` in rare cases."
msgstr ""

#: ../../quickstart.rst:385
msgid "Finally"
msgstr ""

#: ../../quickstart.rst:387
msgid ""
"We only scratched the surface of NHibernate in this small tutorial. Please "
"note that we don't include any ASP.NET specific code in our examples. You "
"have to create an ASP.NET page yourself and insert the NHibernate code as "
"you see fit."
msgstr ""

#: ../../quickstart.rst:391
msgid ""
"Keep in mind that NHibernate, as a data access layer, is tightly integrated "
"into your application. Usually, all other layers depend on the persistence "
"mechanism. Make sure you understand the implications of this design."
msgstr ""
