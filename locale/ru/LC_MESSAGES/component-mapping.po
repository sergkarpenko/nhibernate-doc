# 
msgid ""
msgstr ""
"Project-Id-Version: NHibernate Object Relational Mapper 4.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-12-28 22:06+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../component-mapping.rst:5
msgid "Component Mapping"
msgstr ""

#: ../../component-mapping.rst:7
msgid ""
"The notion of a *component* is re-used in several different contexts, for "
"different purposes, throughout NHibernate."
msgstr ""

#: ../../component-mapping.rst:11
msgid "Dependent objects"
msgstr ""

#: ../../component-mapping.rst:13
msgid ""
"A component is a contained object that is persisted as a value type, not an "
"entity. The term \"component\" refers to the object-oriented notion of "
"composition (not to architecture-level components). For example, you might "
"model a person like this:"
msgstr ""

#: ../../component-mapping.rst:73
msgid ""
"Now ``Name`` may be persisted as a component of ``Person``. Notice that "
"``Name`` defines getter and setter methods for its persistent properties, "
"but doesn't need to declare any interfaces or identifier properties."
msgstr ""

#: ../../component-mapping.rst:78
msgid "Our NHibernate mapping would look like:"
msgstr ""

#: ../../component-mapping.rst:94
msgid ""
"The person table would have the columns ``pid``, ``Birthday``, ``Initial``, "
"``First`` and ``Last``."
msgstr ""

#: ../../component-mapping.rst:100
msgid ""
"Like all value types, components do not support shared references. The null "
"value semantics of a component are *ad hoc*. When reloading the containing "
"object, NHibernate will assume that if all component columns are null, then "
"the entire component is null. This should be okay for most purposes."
msgstr ""

#: ../../component-mapping.rst:105
msgid ""
"The properties of a component may be of any NHibernate type (collections, "
"many-to-one associations, other components, etc). Nested components should "
"*not* be considered an exotic usage. NHibernate is intended to support a "
"very fine-grained object model."
msgstr ""

#: ../../component-mapping.rst:110
msgid ""
"The ``<component>`` element allows a ``<parent>`` subelement that maps a "
"property of the component class as a reference back to the containing "
"entity."
msgstr ""

#: ../../component-mapping.rst:130
msgid "Collections of dependent objects"
msgstr ""

#: ../../component-mapping.rst:132
msgid ""
"Collections of components are supported (eg. an array of type ``Name``). "
"Declare your component collection by replacing the ``<element>`` tag with a "
"``<composite-element>`` tag."
msgstr ""

#: ../../component-mapping.rst:148
msgid ""
"Note: if you define an ``ISet`` of composite elements, it is very important "
"to implement ``Equals()`` and ``GetHashCode()`` correctly."
msgstr ""

#: ../../component-mapping.rst:152
msgid ""
"Composite elements may contain components but not collections. If your "
"composite element itself contains components, use the ``<nested-composite-"
"element>`` tag. This is a pretty exotic case - a collection of components "
"which themselves have components. By this stage you should be asking "
"yourself if a one-to-many association is more appropriate. Try remodelling "
"the composite element as an entity - but note that even though the object "
"model is the same, the relational model and persistence semantics are still "
"slightly different."
msgstr ""

#: ../../component-mapping.rst:162
msgid ""
"Please note that a composite element mapping doesn't support null-able "
"properties if you're using a ``<set>``. NHibernate has to use each columns "
"value to identify a record when deleting objects (there is no separate "
"primary key column in the composite element table), which is not possible "
"with null values. You have to either use only not-null properties in a "
"composite-element or choose a ``<list>``, ``<map>``, ``<bag>`` or "
"``<idbag>``."
msgstr ""

#: ../../component-mapping.rst:171
msgid ""
"A special case of a composite element is a composite element with a nested "
"``<many-to-one>`` element. A mapping like this allows you to map extra "
"columns of a many-to-many association table to the composite element class. "
"The following is a many-to-many association from ``Order`` to ``Item`` where"
" ``PurchaseDate``, ``Price`` and ``Quantity`` are properties of the "
"association:"
msgstr ""

#: ../../component-mapping.rst:194
msgid "Even ternary (or quaternary, etc) associations are possible:"
msgstr ""

#: ../../component-mapping.rst:209
msgid ""
"Composite elements may appear in queries using the same syntax as "
"associations to other entities."
msgstr ""

#: ../../component-mapping.rst:213
msgid "Components as IDictionary indices"
msgstr ""

#: ../../component-mapping.rst:215
msgid ""
"The ``<composite-index>`` element lets you map a component class as the key "
"of an ``IDictionary``. Make sure you override ``GetHashCode()`` and "
"``Equals()`` correctly on the component class."
msgstr ""

#: ../../component-mapping.rst:221
msgid "Components as composite identifiers"
msgstr ""

#: ../../component-mapping.rst:223
msgid ""
"You may use a component as an identifier of an entity class. Your component "
"class must satisfy certain requirements:"
msgstr ""

#: ../../component-mapping.rst:226
msgid "It must be ``Serializable``."
msgstr ""

#: ../../component-mapping.rst:228
msgid ""
"It must re-implement ``Equals()`` and ``GetHashCode()``, consistently with "
"the database's notion of composite key equality."
msgstr ""

#: ../../component-mapping.rst:232
msgid ""
"You can't use an ``IIdentifierGenerator`` to generate composite keys. "
"Instead the application must assign its own identifiers."
msgstr ""

#: ../../component-mapping.rst:235
msgid ""
"Since a composite identifier must be assigned to the object before saving "
"it, we can't use ``unsaved-value`` of the identifier to distinguish between "
"newly instantiated instances and instances saved in a previous session."
msgstr ""

#: ../../component-mapping.rst:239
msgid ""
"You may instead implement ``IInterceptor.IsTransient()`` if you wish to use "
"``SaveOrUpdate()`` or cascading save / update. As an alternative, you may "
"also set the ``unsaved-value`` attribute on a ``<version>`` (or "
"``<timestamp>``) element to specify a value that indicates a new transient "
"instance. In this case, the version of the entity is used instead of the "
"(assigned) identifier and you don't have to implement "
"``IInterceptor.IsTransient()`` yourself."
msgstr ""

#: ../../component-mapping.rst:248
msgid ""
"Use the ``<composite-id>`` tag (same attributes and elements as "
"``<component>``) in place of ``<id>`` for the declaration of a composite "
"identifier class:"
msgstr ""

#: ../../component-mapping.rst:265
msgid ""
"Now, any foreign keys into the table ``FOOS`` are also composite. You must "
"declare this in your mappings for other classes. An association to ``Foo`` "
"would be declared like this:"
msgstr ""

#: ../../component-mapping.rst:278
msgid ""
"This new ``<column>`` tag is also used by multi-column custom types. "
"Actually it is an alternative to the ``column`` attribute everywhere. A "
"collection with elements of type ``Foo`` would use:"
msgstr ""

#: ../../component-mapping.rst:293
msgid "On the other hand, ``<one-to-many>``, as usual, declares no columns."
msgstr ""

#: ../../component-mapping.rst:295
msgid ""
"If ``Foo`` itself contains collections, they will also need a composite "
"foreign key."
msgstr ""

#: ../../component-mapping.rst:314
msgid "Dynamic components"
msgstr ""

#: ../../component-mapping.rst:316
msgid "You may even map a property of type ``IDictionary``:"
msgstr ""

#: ../../component-mapping.rst:326
msgid ""
"The semantics of a ``<dynamic-component>`` mapping are identical to "
"``<component>``. The advantage of this kind of mapping is the ability to "
"determine the actual properties of the component at deployment time, just by"
" editing the mapping document. (Runtime manipulation of the mapping document"
" is also possible, using a DOM parser.)"
msgstr ""
